/*
Copyright (c) 2016, Bertrand Vandeportaele, LAAS/CNRS
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
* Neither the name of the University of California, Berkeley nor the
  names of its contributors may be used to endorse or promote products
  derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



*/
0:pret;
1:en_reg_decal=fin_prediv:sload_prediv=fin_prediv:en_cpt=fin_prediv;
0->1?WRB:sraz_cpt:sload_reg_decal:sload_prediv;
1->0?END_FRAME;


#pragma_vhdl_allow_automatic_buffering

#pragma_vhdl_promote_to_buffer{sraz_cpt,en_cpt}#pragma 
 
//#pragma_vhdl_demote_output_to_signal{en_reg_decal, sload_reg_decal , sload_prediv , en_cpt }#pragma

//plutot tout passer en buffered pour les voir à la simu
#pragma_vhdl_demote_to_signal{sraz_cpt, en_reg_decal, sload_reg_decal, sload_prediv, en_cpt }#pragma
  

#pragma_vhdl_demote_to_signal{END_FRAME, fin_prediv}#pragma


//TODO: parser pour extraire les infos: nom : type (in out buffer integer??) std_logic/std_logic_vector....;
//comme ça près il est possible de mieux faire le port map et surtout le testbench!!!!

 
#pragma_vhdl_entity{ D : in std_logic_vector(7 downto 0);  }#pragma
#pragma_vhdl_entity{ TX : out std_logic;}#pragma
#pragma_vhdl_entity{ BaudRATE_SELECTOR   : in std_logic_vector(1 downto 0);}#pragma
#pragma_vhdl_entity{ iq_cpt : buffer std_logic_vector(3 downto 0);}#pragma
#pragma_vhdl_entity{ iq_reg_decal : buffer std_logic_vector (10 downto 0);}#pragma


//peut être passer tous les sigaux en buffered outputs pour aider en simu

#pragma_vhdl_architecture_pre_begin{ 
--signal iq_cpt,
signal id_cpt: std_logic_vector (3 downto 0);
signal iq_prediv, id_prediv, e_prediv: std_logic_vector (19 downto 0);
--signal iq_reg_decal, 
signal id_reg_decal: std_logic_vector (10 downto 0);
signal D_reg_decal : std_logic_vector(10 downto 0);
signal EVENPARITY : std_logic;
}#pragma

#pragma_vhdl_architecture_post_begin{ 
D_reg_decal <= '0' & D(0) & D(1) & D(2) & D(3) & D(4) & D(5) & D(6) & D(7) & EVENPARITY & '1';
EVENPARITY <=  D(0) XOR D(1) XOR D(2) XOR D(3) XOR D(4) XOR D(5) XOR D(6) XOR D(7); --si on veut odd, utiliser le complément de ce signal
END_FRAME  <= '1' when (iq_cpt="1010")   AND fin_prediv='1' else
	      '0';
--counter:
Process (ck, arazb)
	begin
		if arazb='0' then iq_cpt <= (others=>'0');
		elsif ck'event and ck='1' then iq_cpt <= id_cpt;
		end if;
	end process;

	id_cpt <=  (others=>'0') when sraz_cpt='1' else
	    	   iq_cpt+1 	 when en_cpt='1'   else
	           iq_cpt;
--predivisor:
Process (ck, arazb)
	begin
		if arazb='0' then iq_prediv <= (others=>'1');
		elsif ck'event and ck='1' then iq_prediv <= id_prediv;
		end if;
	end process;

	id_prediv <= e_prediv     when sload_prediv='1'  else
--                   e_prediv     when iq_prediv=0
	    	     iq_prediv-1;

	fin_prediv<= '1' when  iq_prediv=0 else
	    	     '0';

	with BaudRATE_SELECTOR select
                e_prediv<="00000000000000000000" when "00",
                          "00000000000000000001" when "01",
                          "00000000000000000010" when "10",
                          "00000000000000000100" when others;
 
--shift register:
Process (ck, arazb)
	begin
		if arazb='0' then iq_reg_decal <= (others=>'1');
		elsif ck'event and ck='1' then iq_reg_decal <= id_reg_decal;
		end if;
	end process;

	id_reg_decal <= D_reg_decal                      when sload_reg_decal='1' else
	    	        iq_reg_decal(9 downto 0)   & '1' when en_reg_decal='1'   else
	                iq_reg_decal;
	TX<= iq_reg_decal(10);
}#pragma


#pragma_vhdl_testbench{  
 ---------------------------------------	
	wait until (ck'event and ck='0' );
	BaudRATE_SELECTOR<="00";
   D<="01010101";		
	WRB<='1';
	wait for ck_period;
	WRB<='0';
	wait for ck_period*20;
---------------------------------------	
	wait until (ck'event and ck='0' );
	BaudRATE_SELECTOR<="01";
   D<="01010101";		 
	WRB<='1';
	wait for ck_period;
	WRB<='0';
	wait for ck_period*40;
---------------------------------------		
	wait until (ck'event and ck='0' );
	BaudRATE_SELECTOR<="10";
   D<="11100101";		 
	WRB<='1';
	wait for ck_period;
	WRB<='0';
	wait for ck_period*80;
---------------------------------------	

}#pragma

