//inspired from http://www.eng.utah.edu/~nmcdonal/Tutorials/BCDTutorial/BCDConversion.html

#pragma_vhdl_generic_directive{ n:integer:=12; p:integer:=4; }#pragma
#pragma_vhdl_entity{ BIN_VALUE  : in  std_logic_vector(N-1 downto 0) ;}#pragma
#pragma_vhdl_entity{ BCD_VALUE  : buffer  std_logic_vector(p*4-1 downto 0) ;}#pragma

#pragma_vhdl_entity{ TMP_VALUE  : buffer  std_logic_vector(N-1 downto 0) ;}#pragma
  

//définition du modèle
->1?START:LOAD;
=>0?RESETN;
0->1:LOAD;
#(1 to 13);
(1 to 12):COMPUTE;
13:DONE;

#pragma_vhdl_promote_to_buffer{LOAD,COMPUTE }#pragma  
#pragma_vhdl_architecture_pre_begin{  
type arrayOfBcd is array(0 to p-1 ) of std_logic_vector (3 downto 0);
signal BCDELEMENT,BCDELEMENTNEW:arrayOfBcd ; 
}#pragma

//définition du calcul
#pragma_vhdl_architecture_post_begin{  

gen_bcd_value : for i in 0 to p-1 generate 
BCD_VALUE(i*4+3 downto i*4) <= BCDELEMENT(i);
end generate;


Process (ck, RESETN)
	begin
	if RESETN='0' then  BCDELEMENT(0)<= (others=>'0');    TMP_VALUE <=(others=>'0'); 
	elsif ck'event and ck='1' then 
	  if LOAD='1'then   --init synchrone
		TMP_VALUE<=BIN_VALUE;
		BCDELEMENT(0)<= (others=>'0'); 
	  elsif COMPUTE='1' then
		BCDELEMENT(0)<=BCDELEMENTNEW(0)(2 downto 0) & TMP_VALUE(N-1);
		TMP_VALUE<=TMP_VALUE(n-2 downto 0) & '0';
	  end if;
	end if;
end process; 

gen_bcd_value2 : for i in 0 to p-1 generate 
BCDELEMENTNEW(i)<=BCDELEMENT(i)+3 when BCDELEMENT(i)>=5 else BCDELEMENT(i);
end generate;

gen_compute_bcd: for i in 1 to p-1 generate
Process (ck, RESETN)
	begin
	if RESETN='0' then  BCDELEMENT(i)<= (others=>'0');    
	elsif ck'event and ck='1' then 
	  if LOAD='1'then   --init synchrone
		BCDELEMENT(i)<= (others=>'0'); 
	  elsif COMPUTE='1' then
		BCDELEMENT(i)<=BCDELEMENTNEW(i)(2 downto 0) & BCDELEMENTNEW(i-1)(3);
	  end if;
	end if;
end process; 
end generate;
}#pragma


//run for 7000us
#pragma_vhdl_testbench{  
---------------------------------------	
wait until (ck'event and ck='0' );
 BIN_VALUE<=(others=>'0');
for i in 0 to 4095 loop
START<='1';
wait for ck_period;
START<='0';
wait for ck_period*16;
 BIN_VALUE<= BIN_VALUE + 1;
END LOOP;

wait for ck_period*400000;
 
---------------------------------------	
}#pragma
