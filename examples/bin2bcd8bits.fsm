//inspired from http://www.eng.utah.edu/~nmcdonal/Tutorials/BCDTutorial/BCDConversion.html

#pragma_vhdl_generic_directive{ n:integer:=8; m:integer:=12; }#pragma
#pragma_vhdl_entity{ BIN_VALUE  : in  std_logic_vector(N-1 downto 0) ;}#pragma
#pragma_vhdl_entity{ BCD_VALUE  : buffer  std_logic_vector(M-1 downto 0) ;}#pragma

#pragma_vhdl_entity{ TMP_VALUE  : buffer  std_logic_vector(N-1 downto 0) ;}#pragma
#pragma_vhdl_entity{ unit,dec,cent  : buffer  std_logic_vector(3 downto 0) ;}#pragma
#pragma_vhdl_entity{ unitnew,decnew,centnew  : buffer  std_logic_vector(3 downto 0) ;}#pragma
  

//définition du modèle
->1?START:LOAD;
=>0?RESETN;
0->1:LOAD;
#(1 to 9);
(1 to 8):COMPUTE;
9:DONE;

#pragma_vhdl_promote_to_buffer{LOAD,COMPUTE }#pragma  
  

//définition du calcul
#pragma_vhdl_architecture_post_begin{  
BCD_VALUE <= cent & dec & unit;
Process (ck, RESETN)
	begin
	if RESETN='0' then  unit<= (others=>'0')  ;dec<= (others=>'0');  cent<= (others=>'0');  TMP_VALUE <=(others=>'0'); 
	elsif ck'event and ck='1' then 
	  if LOAD='1'then   --init synchrone
		TMP_VALUE<=BIN_VALUE;
		unit<= (others=>'0')  ;dec<= (others=>'0');  cent<= (others=>'0');
	  elsif COMPUTE='1' then
 		cent<=centnew(2 downto 0) & decnew(3);
		dec<=decnew(2 downto 0) & unitnew(3);
		unit<=unitnew(2 downto 0) & TMP_VALUE(7);
		TMP_VALUE<=TMP_VALUE(6 downto 0) & '0';
	  end if;
	end if;
end process; 
unitnew <=unit+3 when  unit>=5 else unit;
decnew <=dec+3 when  dec>=5 else dec;
centnew <=cent+3 when  cent>=5 else cent;
}#pragma


//run for 300us
#pragma_vhdl_testbench{  
---------------------------------------	
wait until (ck'event and ck='0' );
 BIN_VALUE<=(others=>'0');
for i in 0 to 255 loop
START<='1';
wait for ck_period;
START<='0';
wait for ck_period*10;
 BIN_VALUE<= BIN_VALUE + 1;
END LOOP;

wait for ck_period*400000;
 
---------------------------------------	
}#pragma

